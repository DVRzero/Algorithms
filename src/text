-=Основы Программирования=-
1. Блок схемы
2. Системы счисления (2, 8, 16) + переводы из одной СС в другую
3. Idea (Разобраться что это такое и зачем оно нужно, какие есть аналоги)
4. Git (Разобраться, какие есть аналоги, команды clone, commit, push, pull)
    4.1 Создать репозиторий на github
    4.2 Склонировать репозиторий и открыть в IDEA
    4.3 Ветки (merge)
5. Типы данных
    5.1 Какие есть виды?
    5.2 Сколько памяти занимают?
    5.3 Варианты использования?
    5.4 Приведение типов
6. Переменные и константы
    6.1 Присвоение, инициализация, объявление
    6.2 В чём отличие от констант
7. Консольный ввод/вывод данных
8. Арифметические/побитовые операторы
    8.1 +,-,*,/ и оператор mod (%)
    8.2 &, |, ^, ~, <<, >>
9. Условные операторы (if/switch)
    9.1 Логические операторы (&&, ||, !, ^)
    9.2 Тернарнарный оператор
10. Массивы (c учётом многомерности)
11. Приоритет операций
12. Циклы
    12.1 for
    12.2 while
    12.3 do while
    12.4 foreach
13. Методы
------------------------------------------------------------------------------------------------------------------------
Задачи:

1. Составить 2-3 блок схемы (например: поход в магазин, утренняя рутина и подобное)
2. Ввести 2 переменных(int) и поменять их местами.
3. Ввести 2 переменных(int) и поменять их местами без использования третьей переменной. *
4. Ввести 2 переменных(int) и вывести наибольшее (без Math).
5. Ввести 2 переменных(int) и вывести наименьшее (без Math).
6. Ввести число и вывести признак чётности/нечётности.
7. Дан массив чисел, найти наибольшее и вывести.
8. Дан массив чисел, найти наименьшее и вывести.
9. Дан массив чисел, найти его сумму, ср. арифметическое, медиану и вывести всё.
10. Создать двумерных массив содержий степени двоек и вывести. Размер грани вводим из консоли.
2 4 8 16
4 8 16 32
8 16 32 64
16 32 64 128
11. Написать калькулятор, в консоль вводим по отдельности первое число, второе число и арифметический оператор, программа
должна произвести арифметическое действие и вывести результат. (Калькулятор должен уметь работать с дробными числами)
12. Определить максимально и минимальное значение для Integer. Прибавить 1 от максимального и отнять 1 от минимального
значения, затем вывести результаты. Проделать те же самые операции но через Math.addExact() и посмотреть что будет.
(Прочитать про переполнение чисел)
13. Ввести 2 дробных числа, например 1.1 и 0.9. Вычесть одно из другого и посмотреть какой результат получится.
14. Через цикл найти факториал числа.
15. Вывести n-число последовательности Фибоначчи(через Цикл).
16. Сделать рекурсивный метод по нахождению факториала.
17. Вывести n-число последовательности Фибоначчи(через Рекурсию).

Если будем мало задач, то бери отсюда https://github.com/fallGamlet/simple-programming-tasks

========================================================================================================================


-=Алгоритмы и структуры данных=-
https://www.youtube.com/watch?v=cXCuXNwzdfY
https://www.youtube.com/watch?v=Fu4BzQNN0Qs

1. Нотация Big O
    1.1 Оценка сложности по времени и памяти
    1.2 Оценка лучшего, худшего и среднего случая
2. Виды сортировок (Не смотри реализацию/код) Сначала задача №1!
    2.1 Пузырьком
    2.2 Вставками
    2.3 Слиянием
    2.4 другие по желанию
3. Алгоритм бинарного поиска
4. Структуры данных по списку из статьи
    4.1 Какие есть основные виды.
    4.2 Для чего применяются.
    4.3 Какие операции можно применять над ними.
    4.4 Оценка сложности Big O над операциями (в лучшем, худшем и среднем случаях)

------------------------------------------------------------------------------------------------------------------------

Задачи (Для всех задач дать оценку Big O для лучшего, худшего и среднего случая):
1. Отсортировать массив от меньшего к большему придумав свой алгоритм сортировки.
2. Отсортировать массив пузырьковым алгоритмом.
3. Отсортировать массив вставками.
4. Отсортировать массив слиянием.
5. Реализовать метод, который принимает отсортированный массив чисел и число. Нужно найти число в массиве и
вывести кол-во шагов за которое оно было найдено.
    5.1 Решить задачу как получится
    5.2 Решить задачу через алгоритм бинарного поиска.
6. Реализовать динамический массив(список).
7. Реализовать двунаправленный связанный список.
8. Реализовать стек.
9. Реализовать очередь.
10. Реализовать бинарное дерево поиска.
11. Реализовать хэш таблицу(ассоциативный массив)

https://leetcode.com/
Грокаем Алгоритмы

========================================================================================================================

-=ООП=-
Разобраться что означает парадигма программирования.
Что такое ООП?
Что такое процедурное и функциональное программирование?
Чем они отличаются от ООП?
Разобраться в императивном и декларативном подходе.
Что такое класс и объект?
Конструктор, поля и методы класса.
Статические конструктор, поля и методы класс (глобальная переменная)
Оператор new.
Ключевое слово this.
Прочитать про null.
Основные принципы ООП
Абстракция
Наследование
Ключевое слово extends
Запрет наследования
Оператор instanceof
Ключевое слово super.
Полиморфизм
Переопределение методов
Разница между перегрузкой и переопределением методов
Абстрактные классы (абстрактный метод)
Интерфейсы
Зачем нужны?
Методы по умолчанию
Статические и приватные методы.
Реализация интерфейсов (ключевое слово implements).
Расширение интерфейсов.
Контракт интерфейса (что значит контракт?)
Чем интерфейс отличается от абстрактного класса?
Инкапсуляция
Чем инкапсуляция отличается от сокрытия данных?
Модификаторы доступа public, private, protected, package-private (класс, конструктор, поля, методы)
Аксессоры (геттеры и сеттеры)
Виды отношений между классами
Ассоциация
1 ко 0 (и наоборот) 
1 ко 1 
1 ко многим (и наоборот) 
многие ко многим
Агрегация
Композиция
Обобщение
Реализация
Зависимость
Проблемы наследования. Замена наследования на композицию
Проблема множественного наследования. Как она решается в Java?		
god variable



Задание: 
Выбрать знакомую и интересную предметную область (например, интернет-магазин, социальная сеть, музыкальный сервис и т.п.). 
Составить диаграмму классов по выбранной предметной области. 
Определить классы с полями, методами и конструкторами.
Определить связи между классами (у ассоциации указать количество 0 ко 1, 1 ко 1, 1 ко многим и т.д.)
Определить модификаторы доступа.
Попробовать использовать наследование, абстрактные классы, интерфейсы и различные связи между классами.
Перенести диаграмму классов в Java.
Использовать все возможные конструкции изученные в ООП.
Реализовывать методы не надо, нужно оставить заглушки.
	



























-=JAVA=-
Компиляция и запуск
Что такое Java SE?
Что такое JRE и JDK. Что в них входят?
Что такое виртуальная машина?
Компиляция кода. 
Как код компилируется в Java?
В чём отличие от интерпретации?
Что такое JIT компиляция?
Что такое декомпиляция?
Что такое байт-код и машинный код?
В чём различия? 
На каких этапах используются?
jar архив
Зачем он нужен?
Что в него входит? 
Что такое библиотека? Как подключать и использовать в своём коде?
classloader
Что это такое?
Зачем он нужен?
Какие бывают виды?
Можно ли реализовать свой classloader?
ClassNotFoundException
NoClassDefFoundError
Что такое runtime?
В чём различие между раннем (статическим) и поздним (динамическим) связыванием?

Задания:
Без Idea нужно написать, скомпилировать и запустить код по следующим шагам:
Создать файл Main.java, в котором надо реализовать класс Main с выводом в консоль “Hello World!”. 
Скомпилировать файл Main.java.
Запустить скомпилированный код.
Без Idea создать и запустить jar архив по следующим шагам:
Создать jar архив вместе с манифестом.
Запустить скомпилированную программу через jar архив.
Без Idea написать, скомпилировать и запустить код, который использует аргументы метода main.
Создать файл Main.java c методом main. Аргументы метода main нужно  инвертировать и конкатенировать, а затем вывести в консоль. 
Скомпилировать файл Main.java.
Запустить скомпилированный код добавив аргументы.
Сделать всё аналогично как и в предыдущей задачи, но Main.java взять отсюда и нужно при компиляции и запуске указать jar архив библиотеки, которую нужно скачать.
Можно использова Idea. Нужно написать программу, к которой можно подключать плагины. Для этого нужно:
Создать проект и в нём 3 модуля (не пакета).
Первый модуль должен содержать интерфейс с 1 методом.
Нужно его скомпилировать в jar.
Подключить jar в 2 других модуля.
Второй модуль должен содержать класс, который реализует интерфейс из первого модуля.
Реализовать класс
Скомпилировать в jar.
Jar скопировать и положить в корень проекта в папку plugins.
Третий модуль содержит main метод, в котором реализовано:
Нахождение jar плагинов в папке plugins
Загрузка классов из этих плагинов с помощью ClassLoader
Создание экземпляров класса плагина и выполнение метода из интерфейса.



Java memory model, ссылки, объекты

Что такое Java memory model?
Что такое heap и stack?
Для чего используются?
Что в них входят?
Какой размер по умолчанию?
Можно ли изменить размер?
Что такое сборщик мусора?
Для чего он используется?
Как он работает?
Какие бывают виды?
Можно ли вызвать сборщик мусора из кода?
Что такое ссылка?
Каких видов бывают ссылки?
Сколько памяти занимает?
Как происходит передача параметров в метод? По ссылке или по значению?
Класс Object
Зачем нужен и в чём особенность?
Какие есть в нём методы?
hashCode() и equals() - зачем нужны? Какие у них контракты?
finalize() - зачем нужен? В чём особенность?
Какие методы можно переопределить?
Какие классы в java не наследуются от Object?
Класс String
В чём особенности в сравнение с другими классами?
Как сравнивать?
Как храниться в памяти?
Какие методы имеет?
Работа с регулярными выражениями
StringBuffer и StringBuilder
Классы обёртки для примитивных типов.
Что значит boxing и unboxing?
Какие методы есть у классов обортёк?
Расширенные типы данных
BigDecimal - зачем нужен? В чём особенность?
BigInteger - зачем нужен? В чём особенность?
LocalDate, LocalDateTime
В чём отличие от класса Date?


Классы, интерфейсы, пакеты, модули
Inner классы
records
enum
Виды интерфейсов
Generics
Порядок выполнения статических конструкторов, анонимных блоков и обычных конструкторов. В каких случаях и сколько раз они могут быть вызваны? 
Пакеты
Модули








